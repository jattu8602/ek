// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  cart          CartItem[]
  favorites     Favorite[]
  reviews       Review[]
  ratings       Rating[]
  orders        Order[]
  addresses     UserAddress[]
  adminSettings AdminSettings?

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model CartItem {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  productId    String   @db.ObjectId
  unitId       String?  // Reference to ProductUnit
  selectedUnit String?  // Human readable unit like "1 kg", "2 L"
  quantity     Int      @default(1)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("favorites")
}

enum UserRole {
  CUSTOMER
  ADMIN
}

enum ProductStatus {
  ACTIVE
  LOW_STOCK
  OUT_OF_STOCK
}

enum OrderStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model Product {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  urlSlug           String        @unique
  category          String
  subcategory       String
  images            String[]      // Cloudinary URLs
  rating            Float         @default(0)
  reviewCount       Int           @default(0)
  description       String
  status            ProductStatus @default(ACTIVE)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  reviews           Review[]
  ratings           Rating[]
  orderItems        OrderItem[]
  units             ProductUnit[]
  cartItems         CartItem[]

  @@map("products")
}

model ProductUnit {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  productId       String        @db.ObjectId
  number          String        // e.g., "1", "5", "10"
  type            String        // e.g., "kg", "gram", "liter", "ml"
  actualPrice     Float
  discountedPrice Float
  stock           Int?          // Optional stock quantity
  status          ProductStatus @default(ACTIVE)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_units")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Rating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  stars     Int      // 1-5
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("ratings")
}

model Order {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  userId          String      @db.ObjectId
  status          OrderStatus @default(PENDING)
  totalAmount     Float
  phoneNumber     String
  shippingAddress String      // JSON string of address
  deliveryDate    DateTime?   // Set by admin for home delivery
  isShopPickup    Boolean     @default(false)
  paymentId       String?     // Razorpay payment ID
  paymentStatus   String?     // PENDING, CAPTURED, FAILED
  adminNotes      String?     // Admin notes for rejection reason
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems  OrderItem[]
  paymentTransaction PaymentTransaction?

  @@map("orders")
}

model OrderItem {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId      String  @db.ObjectId
  productId    String  @db.ObjectId
  unitId       String? // Reference to ProductUnit
  selectedUnit String? // Human readable unit like "1 kg", "2 L"
  quantity     Int
  unitPrice    Float   // Price per unit at time of purchase
  totalPrice   Float   // Total price for this item (unitPrice * quantity)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model UserAddress {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  name      String
  phone     String
  address   String
  city      String
  state     String
  pincode   String
  landmark  String?
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model PaymentTransaction {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId           String   @unique @db.ObjectId
  razorpayOrderId   String
  razorpayPaymentId String?
  razorpaySignature String?
  amount            Float
  currency          String   @default("INR")
  status            String   // PENDING, CAPTURED, FAILED, REFUNDED
  refundId          String?  // Razorpay refund ID
  refundAmount      Float?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_transactions")
}

model AdminSettings {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @unique @db.ObjectId
  geminiApiKey String?
  openaiApiKey String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admin_settings")
}
